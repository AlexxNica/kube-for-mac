#!/bin/bash

set -o errexit
set -o nounset
set -o pipefail

DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
source "$DIR/common.sh"

bigLog "Deleting Kubernetes cluster..."
  
for container in $CONTAINER_NAMES; do
  docker rm -f $container || echo "No need to clean up $container"
done

# For the remaining containers, make sure we kill any that are using streamplace/kube-for-mac
  
bigLog "Deleting all kubernetes containers..."
kubeContainers="$(docker ps -a --format '{{.Names}}' | grep '^k8s_' || true)"

for container in $kubeContainers; do
  docker rm -f "$container"
done 
  
bigLog "Deleting kube-for-mac startup container..."
# Don't delete ourselves in this process, lol
allContainers="$(docker ps --format '{{.ID}}' | grep -v $HOSTNAME || true)"
for container in $allContainers; do
  json="$(docker inspect $container)"
  image="$(echo $json | jq -r '.[].Name')"
  if echo $image | grep 'kube-for-mac-start'; then
    docker rm -f "$container"
  fi
done

bigLog "Removing all kubelet mounts (account for ordering)"
the_ctr=0
the_max=5
while [ $the_ctr -lt $the_max ] ; do
  the_ctr=$((the_ctr + 1))
  kubeletMounts="$(onVM mount | awk '{print $3;}' | grep kubelet | sort | uniq | sort -r || true)"
  for thisMount in $kubeletMounts; do
    echo "Removing mount: $thisMount"
    onVM umount "$thisMount" || true
  done
  kubeletMounts="$(onVM mount | awk '{print $3;}' | grep kubelet | sort | uniq | sort -r || true)"
  [ x"$kubeletMounts" = x ] && break || true
done

bigLog "Removing /var/lib/kubelet" 
onVM rm -Rf /var/lib/kubelet

# handle hacks (thanks, Kubernetes Authors)
if [ x"$K8S_HACKS" != x ]; then
  for i in $(echo "$K8S_HACKS") ; do
    bigLog "Executing hack: '$i'"
    source "$i" CLEANUP
  done 
fi

